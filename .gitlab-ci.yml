image: docker.siemens.com/ccp/vm:v5

stages:
  - compile
  - test
  - build-package
  - deploy

before_script:
  # Install build dependencies
  - sudo apt-get -qq update
  - sudo apt-get -qq -y install lsb-release sudo php5-curl libpq-dev libdbd-sqlite3-perl libspreadsheet-writeexcel-perl debhelper
  - sudo utils/fo-installdeps -e -o -y
  - sudo apt-get -qq -y install postgresql postgresql-server-dev-all cppcheck php5-pgsql sqlite3 php5-sqlite libsqlite3-0 libsqlite3-dev
  - sudo apt-get install -qq -y debhelper libglib2.0-dev libmagic-dev libxml2-dev
  - sudo apt-get install -qq -y libtext-template-perl librpm-dev  rpm libpcre3-dev libssl-dev
  - sudo apt-get install -qq -y apache2 libapache2-mod-php5 php5-pgsql php-pear php5-cli
  - sudo apt-get install -qq -y binutils bzip2 cabextract cpio sleuthkit genisoimage poppler-utils
  - sudo apt-get install -qq -y rpm upx-ucl unrar-free unzip p7zip-full p7zip wget git-core subversion
  - sudo apt-get install -qq -y libpq-dev libcunit1-dev libcppunit-dev
  - sudo apt-get install -qq -y libboost-regex-dev libboost-program-options-dev
  - sudo apt-get install -y liblocal-lib-perl

  # TO resolve ninka build dependency
  - git clone --branch release-1.1104 https://code.siemens.com/mirror/io-captureoutput.git
  - cd io-captureoutput && perl Makefile.PL && make && make test && sudo make install && cd ..
  - rm -rf io-captureoutput

  # Create and patch FOSSology cache
  - sudo mkdir -p /var/local/cache/fossology && sudo chown $(whoami) /var/local/cache/fossology

  # Install composer
  # - sudo mv install/composer /usr/local/bin/composer

  # Install composer dependencies
  - cd src
  # - composer install --dev
  - wget https://linux.siemens.de/pub/tools/FOSSologyNG/php-vendor.tar
  - tar xvf php-vendor.tar
  - rm -rf php-vendor.tar
  - current_dir=`pwd` 
  - cd && git clone https://code.siemens.com/mirror/ninka.git && cd ninka/ && perl Makefile.PL && make && sudo make install
  # jump back to project root level
  - cd $current_dir
  - cd ..
  
  # Create postgres DB
  - sudo /etc/init.d/postgresql start
  - sudo /etc/init.d/postgresql status

  - sudo -u postgres psql -c "CREATE USER fossy WITH PASSWORD 'fossy' CREATEDB"
  - sudo -u postgres psql -c "CREATE DATABASE fossology OWNER fossy"

compile:
  tags:
   - VLAN
  stage: compile
  script:
    - echo "Running compile"
    - make

C-test:
  tags:
    - VLAN
  stage: test
  script:
    - echo "Running C test"
    - sudo make all test-lib test-monk test-nomos
    - sudo cppcheck -q -isrc/nomos/agent_tests/testdata/NomosTestfiles/ -isrc/testing/dataFiles/ src/

PHPCPD-test:
  tags:
    - VLAN
  stage: test
  script:
    - echo "Running PHPCPD test"
    - sudo src/vendor/bin/phpcpd src/cli/ src/copyright/ src/decider*/ src/lib/ src/monk/ src/nomos/ src/readmeoss/ src/spdx2/ src/www/
  allow_failure: true

PHPCS-test:
  tags:
    - VLAN
  stage: test
  script:
    - echo "Running PHPCS test"
    - sudo src/vendor/bin/phpcs --standard=src/fossy-ruleset.xml src/lib/php/*/ src/www/ui/page/ src/www/ui/async/ src/spdx2 src/monk 

PhpUnit-test:
  tags:
    - VLAN
  stage: test
  script:
    - echo "Running PhpUnit test"
    - sudo make all test-monk
    - wget https://linux.siemens.de/pub/tools/FOSSologyNG/SPDXTools-v2.1.0.zip
    - unzip SPDXTools-v2.1.0 && mv SPDXTools-v2.1.0/spdx-tools-2.1.0-jar-with-dependencies.jar src/spdx2/agent_tests/Functional/ 
    - rm -rf SPDXTools-v2.1.0*
    - sudo src/vendor/bin/phpunit -c src/phpunit.xml

package:
  tags:
    - VLAN
  stage : build-package
  script:
    - echo "Running package"
    - dpkg-buildpackage -I
    - mkdir packages  
    - cp ../*.deb packages/

    # Publish only ng-master packages
    - if [ "$CI_BUILD_REF_NAME" == "ng-master" ]; then
    # creating archive
    -   tar -czvf fossologyng-master-current.tar.gz packages/*.deb

    # adding host key to list of known hosts 
    -   mkdir -p ~/.ssh   
    -   ssh-keyscan -H $PACKAGE_SERVER_NAME > ~/.ssh/known_hosts

    # super important: adding key to ssh agent, othewiese the private key file is not considered
    -   echo $PACKAGE_SERVER_KEY > key
    -   chmod 600 key
    -   eval $(ssh-agent -s)
    -   ssh-add  <(echo "$PACKAGE_SERVER_KEY")
    -   ssh-add -L

    # finally copying the artifacts
    -   scp -i key fossologyng-master-current.tar.gz fossy@$PACKAGE_SERVER_NAME:$PACKAGE_SERVER_PATH
    - fi
  artifacts:
    expire_in: 2 weeks
    paths:
      - packages

deploy-test:
  tags:
    - VLAN
  allow_failure: true
  stage : deploy
  environment:
    name: BLR-test
    url: "http://${TEST_SERVER_NAME}/repo"
  when: manual
  dependencies:
    - package
  before_script:
    - echo "Running deploy-test"
  script:
    # adding host key to list of known hosts
    - mkdir -p ~/.ssh
    - ssh-keyscan -H ${TEST_SERVER_NAME} > ~/.ssh/known_hosts
    # super important: adding key to ssh agent, othewiese the private key file is not considered
    - echo ${DEVDEPLOY_SERVER_KEY} > key
    - chmod 600 key
    - eval $(ssh-agent -s)
    - ssh-add  <(echo "${DEVDEPLOY_SERVER_KEY}")
    - ssh-add -L
    # copying the artifacts
    - sudo apt-get -qq update && sudo apt-get install -y -qq rsync
    - ssh ${TEST_SERVER_USER}@${TEST_SERVER_NAME} "rm -f ${TEST_SERVER_FPATH}/*.deb"
    - rsync -hrtz -v -e "ssh" --include '*.deb' --exclude '*' ./packages/ ${TEST_SERVER_USER}@${TEST_SERVER_NAME}:${TEST_SERVER_FPATH}/
    # logging in and artifacts install
    - ssh ${TEST_SERVER_USER}@${TEST_SERVER_NAME} "rm -f ${TEST_SERVER_FPATH}/fossology-ninka*"
    - ssh ${TEST_SERVER_USER}@${TEST_SERVER_NAME} "sudo dpkg -i ${TEST_SERVER_FPATH}/*.deb || sudo apt-get -f install -y"

pages:
  tags:
    - VLAN
  allow_failure: true
  stage: deploy
  when: manual
  before_script:
    - echo "Building doxygen pages"
    - sudo apt-get -qq update && sudo apt-get install -y -qq doxygen
  script:
    # Get the output directory from conf file
    - export OPDIR=$(gawk 'match($0, /^OUTPUT_DIRECTORY[[:space:]]*=[[:space:]]*[[:punct:]]?([^ '\"\''\\]+)[[:punct:]]?$/, m) { print m[1]; }' fossology_doxygen.conf)
#' To fix editor highlights
    - git fetch --tags
    - export CURR_TAG=$(git describe --abbrev=0 --tags || echo "unknown")
    - sed -i -e "s/^PROJECT_NUMBER.*=/PROJECT_NUMBER = \"${CURR_TAG}\"/g" fossology_doxygen.conf
    - doxygen fossology_doxygen.conf
    - mv ${OPDIR}/html ./public
# Copy favicon
    - cp ./src/www/ui/favicon.ico ./public/favicon.ico
  artifacts:
    paths:
      - public

